// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  password      String
  name          String?
  avatar        String?
  provider      String?
  role          Role           @default(USER)
  employerIds   String[]       @db.ObjectId
  employeeIds   String[]       @db.ObjectId
  employers     User[]         @relation("Employer", fields: [employerIds], references: [id])
  employess     User[]         @relation("Employer", fields: [employeeIds], references: [id])
  locations     Location[]
  userLocations UserLocation[]
  Job           Job[]
  notifications Notification[]
  createJobs Job[] @relation(name: "creator")
  
  deviceTemplates DeviceTemplate[] @relation("UserDeviceTemplates", fields: [deviceTemplateIds], references: [id])
  deviceTemplateIds String[] @db.ObjectId
}

model Location {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  image         String?
  ownerId       String           @db.ObjectId
  setting       LocationSetting?
  owner         User             @relation(fields: [ownerId], references: [id])
  areas         Area[]
  userLocations UserLocation[]
  Job           Job[]
  irrigation    Irrigation[]
  Automations   Automations[]
  PetsPredict   PetsPredict[]

  @@index([ownerId], name: "ownerId")
}

type File {
  url String
  name String
}

model Job {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      JobStatus @default(PENDING)
  order       Float       @default(0)
  reports      File[]
  locationId  String    @db.ObjectId
  creatorId   String    @db.ObjectId
  creator     User      @relation(name: "creator",fields: [creatorId], references: [id], onDelete: Cascade)
  asigneeId   String?   @db.ObjectId
  asignee     User?     @relation(fields: [asigneeId], references: [id], onDelete: Cascade)
  location    Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserLocation {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  user       User             @relation(fields: [userId], references: [id])
  role       UserLocationRole @default(EMPLOYEE)
  locationId String           @db.ObjectId
  location   Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId], name: "userId_locationId")
}

model Area {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  locationId String    @db.ObjectId
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  devices    Device[]
  gateways   Gateway[]

  @@index([locationId], name: "locationId")
}

model DeviceTemplate {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  model       String
  year        Int
  image       String?
  description String?
  deviceType  DeviceType
  Device      Device[]
  users       User[]     @relation("UserDeviceTemplates", fields: [userIds], references: [id])
  userIds     String[]   @db.ObjectId
}

model Gateway {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  host             String       
  port             Int
  description      String?
  connectionStatus Boolean?
  auth             GatewayAuth?
  areaId           String       @db.ObjectId
  area             Area         @relation(fields: [areaId], references: [id], onDelete: Cascade)
  devicesConnected Device[]

  @@index([areaId], name: "areaId")
}

model Device {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  serialNumber String         @unique
  topic        String
  areaId       String         @db.ObjectId
  online       Boolean        @default(false)
  area         Area           @relation(fields: [areaId], references: [id])
  deviceType   DeviceType
  data         Data[]
  templateId   String         @db.ObjectId
  template     DeviceTemplate @relation(fields: [templateId], references: [id])
  gatewayId    String?        @db.ObjectId
  gateway      Gateway?       @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  Automations  Automations[]

  @@index([areaId], name: "areaId")
  @@index([gatewayId], name: "gatewayId")
}

model Irrigation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  time       Int
  locationId String   @db.ObjectId
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Automations {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  condition   Condition?
  actions     Action[]
  limitPeriod Int?
  deviceId    String?    @db.ObjectId
  device      Device?    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  locationId  String     @db.ObjectId
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model PetsPredict {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  locationId String   @db.ObjectId
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  image      String
  result     String
  createdAt  DateTime @default(now())
}

model Notification {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sendToUserId String @db.ObjectId
  sendToUser   User   @relation(fields: [sendToUserId], references: [id])
  content      String
  link         String?
  status       NotificationStatus @default(UNREAD)
  createdAt    DateTime           @default(now())
}

enum NotificationStatus {
  READ
  UNREAD
}

type Condition {
  type                 ConditionType
  cronCondition        String?
  deviceStateCondition DeviceStateCondition?
}

type Action {
  type     ActionType
  time     Int?
  useAI    Boolean?
  deviceId String?
  toEmail  String?
  title    String?
  body     String?
}

type DeviceStateCondition {
  type     DeviceStateConditionType
  dataType DataType?
  value    String
}

type GatewayAuth {
  token    String?
  username String?
  password String?
}

type LocationSetting {
  capacity        Int
  area            Int
  disPerRow       Int
  disPerHole      Int
  fertilizerLevel Int
  totalHole       Int
  dripRatePerHole Int
  wateringMode    Boolean
}

type Data {
  type DataType
  time Int
  data Float
}

enum DataType {
  Temperature
  Humidity
  Rainfall
  Wind
  SoilMoisture
}

enum DeviceType {
  SENSOR
  LIGHT_BULB
  DOME
  VALVE
}

enum Role {
  ADMIN
  USER
  EMPLOYEE
}

enum UserLocationRole {
  EMPLOYEE
  EMPLOYER
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ConditionType {
  Schedule
  DeviceState
  Scene
}

enum DeviceStateConditionType {
  equal
  notEqual
  greaterThan
  lessThan
  greaterThanOrEqual
  lessThanOrEqual
  between
  notBetween
  in
  notIn
}

enum ActionType {
  TurnOn
  TurnOff
  SendEmail
  Watering
}
